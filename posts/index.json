{
  "values": [
    {
      "title": "[undefined,1] 和 [,1]的区别在哪里--认识js中的稀疏数组",
      "tags": "js",
      "postDate": "2017-8-21 22:47:19",
      "id": "/article/认识js中的稀疏数组",
      "text": " 事情是这样的今天我想写一个能快速生成一个自然数数组的函数，就是`[0,1,2,3]`这样的，然后我写了下面的代码:```jsnew Array(10).map((item, index) => {  return index})```我本以为会得到一个0-9的数组，结果确发现map方法并没有执行。原来是稀疏数组在搞鬼。 什么是稀疏数组首先看下面这个问题:"
    },
    {
      "title": "写一个vue loading 插件",
      "tags": "vue",
      "postDate": "2017-8-13 16:05:41",
      "id": "/article/vue_plugin",
      "text": " 什么是vue插件?- 从功能上说，插件是为Vue添加全局功能的一种机制，比如给Vue添加一个全局组件，全局指令等；- 从代码结构上说，插件就是一个必须拥有`install`方法的对象,这个方法的接收的第一个参数是Vue构造函数，还可以接收一个可选的参数，用于配置插件：```jsvar myplugin = {  install:function(Vue, options){"
    },
    {
      "title": "认真学习customEvent",
      "tags": "DOM",
      "postDate": "2017-7-22 23:20:57",
      "id": "/article/customEvent",
      "text": "> 最近要实现一个模拟的select元素组件，所以好好看了这个自定义事件api，记录一下。整体来说，这个api由3部分组成，监听事件的元素，触发事件的元素和event对象.* 监听事件的元素主要负责监听事件，事件发生了调用回调函数。跟DOM事件一样* 触发事件的元素负责在一定的条件下触发自定义事件* `event`对象，就好像击鼓传花，由事件的触发者传递给事件的监听者，供回调函数使用"
    },
    {
      "title": "绕不过去的正则之样式篇",
      "tags": "re",
      "postDate": "2017-7-7 17:25:13",
      "id": "/article/绕不过去的正则之样式篇",
      "text": "> 7-20过来填坑 正则中的量词正则中的量词主要有 `?`, `+`, `*`, `{}` 。用来表示对量词前面的表达式进行重复.* _?_ 表示字符串中有0个或一个前面的元素  ```js    /a?/.test('b') //true    /a?/.test('a') //true    /a?/.test('aa') //true    /a(bc)?/.t"
    },
    {
      "title": "绕不过去的正则",
      "tags": "js re",
      "postDate": "2017-7-2 09:48:39",
      "id": "/article/绕不过去的正则",
      "text": " 正则的属性正则怪异的写法，常常让人望而却步，但是只要我们要处理`string`,正则便绕不过去。所以这里系统整理一下，权当笔记。懒的不想写，一定补上 正则表达式语法有两种方式得到一个正则表达式实例，调用构造函数,或者字面量写法,得到的是一个正则表达式的对象。```jsvar a = /a/i;var b = new RegExp('b','i');```"
    },
    {
      "title": "vue实现3D标签云",
      "tags": "vue svg",
      "postDate": "2017-6-24 20:43:29",
      "id": "/article/3Dsvg",
      "text": " 闲扯两句最近想给自己的博客上加上一个3D标签云的效果，用来表示自己博客文章的分组，网上找到了[canvas](https://github.com/goat1000/TagCanvas)实现的，还有a元素实现的[解析3D标签云](http://www.cnblogs.com/axes/p/3501424.html)，我想让标签可以选择和点击，又不想在标签数量较多时操作a标签导致性能问题"
    },
    {
      "title": "重新认识string.prototype.replace",
      "tags": "js api",
      "postDate": "2017-6-15 21:07:13",
      "id": "/article/replace",
      "text": "字符串的replace方法是操作字符串的常用方法之一，但这个方法只有当与正则合并使用时，才能体现出它的强大之处。> 语法：`str.replace(regexp|substr, newsubStr|function)`;    <br>返回值： 一个部分或全部匹配由替代模式所取代的新的字符串，因为字符串是不可变的原始类型。 基础用法str.replace(substr, new"
    },
    {
      "title": "从lazyman谈谈流程控制",
      "tags": "流程控制 js",
      "postDate": "2017-06-02 23:41",
      "id": "/article/从lazyman到js流程控制",
      "text": "> 参考文章:http://web.jobbole.com/89626/ 一道面试题```实现一个LazyMan，可以按照以下方式调用:LazyMan(“Hank”)输出:Hi! This is Hank!LazyMan(“Hank”).sleep(10).eat(“dinner”)输出Hi! This is Hank!//等待10秒..Wake up after 10"
    },
    {
      "title": "浏览器是怎么渲染页面的",
      "tags": "性能",
      "postDate": "2017-05-22 22:01",
      "id": "/article/3",
      "text": " 浏览器前端优化> 本文转载自：[众成翻译](http://www.zcfy.cc)> 译者：[网络埋伏纪事](http://www.zcfy.cc/@bigshaw)> 链接：[http://www.zcfy.cc/article/2847](http://www.zcfy.cc/article/2847)> 原文：[https://hackernoon.com/optimisi"
    },
    {
      "title": "写在520",
      "tags": "电影",
      "postDate": "2017-05-20 20:51:53",
      "id": "/article/2",
      "text": " 夏日光年写影评去豆瓣啊，在这里写干嘛？？，好的，打扰了，excuse me..拜拜~， 顺便测试~~删除线好不好用~~"
    },
    {
      "title": "一个想法",
      "tags": "idea",
      "postDate": "date:2017-3-26",
      "id": "/article/1",
      "text": " 在写blog的时候，我用hexo，并部署在github子路径下。我每次写完要更新的时候，需要`hexo g`,然后将静态文件目录替换之前的所有文件，感觉比较麻烦。才有了这个想法。"
    }
  ],
  "allTags": [
    "idea",
    "电影",
    "js",
    "api",
    "vue",
    "svg",
    "性能",
    "re",
    "流程控制",
    "DOM"
  ]
}